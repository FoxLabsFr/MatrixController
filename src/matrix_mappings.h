#ifndef MATRIX_MAPPINGS_H
#define MATRIX_MAPPINGS_H

#include <Arduino.h>



// ROUND MATRIX MAPPING (12x12 with circular pattern)
const uint8_t ROUND_MATRIX[12][12] = {
    {255, 255, 255, 255,  0,  1,  2,  3, 255, 255, 255, 255},
    {255, 255,  4,  5,  6,  7,  8,  9, 10, 11, 255, 255},
    {255, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 255},
    {255, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 255},
    {32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43},
    {44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55},
    {56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67},
    {68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79},
    {255, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 255},
    {255, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 255},
    {255, 255, 100, 101, 102, 103, 104, 105, 106, 107, 255, 255},
    {255, 255, 255, 255, 108, 109, 110, 111, 255, 255, 255, 255}
};

// HEXAGONAL MATRIX MAPPING (14x14 with hexagonal pattern)
const uint8_t HEXAGONAL_MATRIX[14][14] = {
    {255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 255, 255, 255, 255},
    {255, 255, 255, 6, 7, 8, 9, 10, 11, 12, 13, 255, 255, 255},
    {255, 255, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 255, 255},
    {255, 255, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 255, 255},
    {255, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 255},
    {255, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 255},
    {58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71},
    {72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85},
    {255, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 255},
    {255, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 255},
    {255, 255, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 255, 255},
    {255, 255, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 255, 255},
    {255, 255, 255, 130, 131, 132, 133, 134, 135, 136, 137, 255, 255, 255},
    {255, 255, 255, 255, 138, 139, 140, 141, 142, 143, 255, 255, 255, 255}
};

// TRIANGULAR MATRIX MAPPING (16x16 with triangular pattern)
const uint8_t TRIANGULAR_MATRIX[16][16] = {
    { 255, 255, 255, 255, 255, 255, 255,  0,  1, 255, 255, 255, 255, 255, 255, 255},
    { 255, 255, 255, 255, 255, 255, 255,  2,  3, 255, 255, 255, 255, 255, 255, 255},
    { 255, 255, 255, 255, 255, 255,  4,  5,  6,  7, 255, 255, 255, 255, 255, 255},
    { 255, 255, 255, 255, 255, 255,  8,  9, 10, 11, 255, 255, 255, 255, 255, 255},
    { 255, 255, 255, 255, 255, 12, 13, 14, 15, 16, 17, 255, 255, 255, 255, 255},
    { 255, 255, 255, 255, 255, 18, 19, 20, 21, 22, 23, 255, 255, 255, 255, 255},
    { 255, 255, 255, 255, 24, 25, 26, 27, 28, 29, 30, 31, 255, 255, 255, 255},
    { 255, 255, 255, 255, 32, 33, 34, 35, 36, 37, 38, 39, 255, 255, 255, 255},
    { 255, 255, 255, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 255, 255, 255},
    { 255, 255, 255, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 255, 255, 255},
    { 255, 255, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 255, 255},
    { 255, 255, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 255, 255},
    { 255, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 255},
    { 255, 99,100,101,102,103,104,105,106,107,108,109,110,111,112, 255},
    {113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128},
    {129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144}
  };

// Note: For custom matrix mappings, users should provide their own array
// and pass it directly to the MatrixController constructor

#endif // MATRIX_MAPPINGS_H
